#include <ArduinoBLE.h>

BLEService componentService("19B10000-E8F2-537E-4F6C-D104768A1214"); // Bluetooth® Low Energy LED Service | https://www.guidgenerator.com/online-guid-generator.aspx

// Bluetooth® Low Energy Characteristic - custom 128-bit UUID, read and writable by central -> aumento de uma unidade por Characteristic
//No final do 1º setor de números passei de 19B10000 para 19B10001

BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

const int componente = 2; // pin to use for the component (Led, Buzzer, Servo...)

void setup() {
  Serial.begin(9600);
  while (!Serial); //Espera que o arduino conecte com o computador e só depois permite enviar dados ao serial monitor do IDE

  // set component pin to output mode
  pinMode(componente, OUTPUT);
  
  // begin initialization
  if (!BLE.begin()) {
    Serial.println("starting Bluetooth® Low Energy module failed!");
    while (1);
  }
  /*Esta condição IF é o mesmo que:
    while(!BLE.begin()){
      Serial.println("starting Bluetooth® Low Energy module failed!"); 
   */

  // Nome do serviço UUID/GUID que quero anunciar (advertising):
  BLE.setLocalName("Componente");
  BLE.setAdvertisedService(componentService);

  // add the characteristic to the service
  componentService.addCharacteristic(switchCharacteristic); //o que pretendo fazer é mudar(switch) o valor do componente para desligado ou ligado

  // add service
  BLE.addService(componentService);

  // set the initial value for the characeristic:
  switchCharacteristic.writeValue(0); //o estado inicial do meu component é 0 => desligado

  // start advertising
  BLE.advertise();
  Serial.println("Componente on or off");
}

void loop() {
  // listen for Bluetooth® Low Energy peripherals to connect:
  //Central é o dispositivo que vai ligar ao arduino => telemovel, tablet (...)
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {
      // Se escrevermos um novo valor na Characteristic vamos atuar no componente de acordo com essa alteração
      if (switchCharacteristic.written()) {
        if (switchCharacteristic.value()) {   // Qualquer valor diferente de 0
          Serial.println("Componente on");
          digitalWrite(componente, HIGH);        // will turn the component on
        } else {                                // a 0 value
          Serial.println(F("Componente off"));
          digitalWrite(componente, LOW);          // will turn the component off       
        }
      }
    }

    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());
  }
}
